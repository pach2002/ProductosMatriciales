     1                                 %line 1+1 func_euclides.asm
     2                                 
     3                                 [section .data]
     4                                 
     5                                 
     6                                  EXIT_SUCCESS equ 0
     7                                  SYS_EXIT equ 60
     8                                 
     9                                 
    10                                 
    11                                  LF equ 10
    12                                  NULL equ 0
    13                                 
    14                                  STDIN equ 0
    15                                  STDOUT equ 1
    16                                  STDERR equ 2
    17                                 
    18                                  SYS_read equ 0
    19                                  SYS_write equ 1
    20                                  SYS_close equ 3
    21                                  SYS_creat equ 85
    22                                 
    23 00000000 4C612044697374616E-     mensaje db "La Distancia Eucliadana es la Raiz de: ", 0
    24 00000000 636961204575636C69-
    25 00000000 6164616E6120657320-
    26 00000000 6C61205261697A2064-
    27 00000000 653A2000           
    28 00000028 00                      valorRDX db 0
    29 00000029 0A00                    LF_DB db LF, 0
    30                                 
    31                                 [section .text]
    32                                 [global _start]
    33                                  _start:
    34                                 
    35 00000000 48C7C702000000          mov rdi, 2
    36 00000007 48C7C605000000          mov rsi, 5
    37 0000000E 48C7C20A000000          mov rdx, 10
    38 00000015 48C7C108000000          mov rcx, 8
    39                                 
    40 0000001C E863000000              call EuclideanDistance
    41                                 
    42                                 
    43 00000021 4889D0                  mov rax, rdx
    44 00000024 48C7C30A000000          mov rbx, 10
    45 0000002B 4831C9                  xor rcx, rcx
    46                                  convertLoop:
    47 0000002E 4831D2                  xor rdx, rdx
    48 00000031 48F7F3                  div rbx
    49 00000034 80C230                  add dl, '0'
    50 00000037 48FFC9                  dec rcx
    51 0000003A 8891[00000000]          mov byte [valorRDX + rcx], dl
    52 00000040 4885C0                  test rax, rax
    53 00000043 75E7                    jnz convertLoop
    54                                 
    55                                 
    56 00000045 48C7C7[00000000]        mov rdi, mensaje
    57 0000004C 48C7C6[00000000]        mov rsi, valorRDX
    58 00000053 E88A000000              call appendString
    59                                 
    60                                 
    61 00000058 48C7C7[00000000]        mov rdi, mensaje
    62 0000005F 48C7C6[00000000]        mov rsi, LF_DB
    63 00000066 E877000000              call appendString
    64                                 
    65 0000006B 48C7C7[00000000]        mov rdi, mensaje
    66 00000072 E838000000              call printString
    67 00000077 EBFE                    jmp last
    68                                 
    69                                  last:
    70                                 
    71 00000079 48C7C03C000000          mov rax, SYS_EXIT
    72 00000080 48C7C700000000          mov rdi, EXIT_SUCCESS
    73 00000087 0F05                    syscall
    74                                 
    75                                 
    76                                 
    77                                 
    78                                 [global EuclideanDistance]
    79                                 EuclideanDistance:
    80                                 
    81 00000089 53                      push rbx
    82                                 
    83                                 
    84 0000008A 4829FA                  sub rdx, rdi
    85                                 
    86                                 
    87 0000008D 4829F1                  sub rcx, rsi
    88                                 
    89                                 
    90                                 
    91 00000090 4831C0                  xor rax, rax
    92                                 
    93 00000093 4889D0                  mov rax, rdx
    94 00000096 48F7E2                  mul rdx
    95 00000099 4889C3                  mov rbx, rax
    96                                 
    97                                 
    98                                 
    99                                 
   100                                 
   101 0000009C 4831C0                  xor rax, rax
   102                                 
   103 0000009F 4889C8                  mov rax, rcx
   104 000000A2 48F7E1                  mul rcx
   105 000000A5 4889C1                  mov rcx, rax
   106                                 
   107 000000A8 EBFE                    jmp next
   108                                 
   109                                  next:
   110                                 
   111 000000AA 4801CB                  add rbx, rcx
   112 000000AD 4889DA                  mov rdx, rbx
   113 000000B0 EBFE                    jmp endProcess
   114                                 
   115                                 
   116                                 
   117                                  endProcess:
   118 000000B2 5B                      pop rbx
   119 000000B3 C3                      ret
   120                                 
   121                                 
   122                                 
   123                                 
   124                                 
   125                                 [global printString]
   126                                 printString:
   127                                 
   128 000000B4 53                      push rbx
   129                                 
   130                                 
   131 000000B5 4889FB                  mov rbx, rdi
   132 000000B8 48C7C200000000          mov rdx, 0
   133                                  countStrLoop:
   134 000000BF 803B00                  cmp byte [rbx], NULL
   135 000000C2 7406                    je countStrDone
   136 000000C4 48FFC2                  inc rdx
   137 000000C7 48FFC3                  inc rbx
   138 000000CA EBF1                    jmp countStrLoop
   139                                 
   140                                  countStrDone:
   141 000000CC 4883FA00                cmp rdx, 0
   142 000000D0 7411                    je prtDone
   143                                 
   144                                 
   145 000000D2 48C7C001000000          mov rax, SYS_write
   146 000000D9 4889FE                  mov rsi, rdi
   147 000000DC 48C7C701000000          mov rdi, STDOUT
   148                                 
   149 000000E3 0F05                    syscall
   150                                 
   151                                 
   152                                 
   153                                  prtDone:
   154 000000E5 5B                      pop rbx
   155 000000E6 C3                      ret
   156                                 
   157                                 
   158                                 
   159                                 
   160                                 
   161                                 [global appendString]
   162                                 appendString:
   163                                 
   164 000000E7 53                      push rbx
   165                                 
   166                                 
   167 000000E8 4889FB                  mov rbx, rdi
   168 000000EB 48C7C200000000          mov rdx, 0
   169                                  findEndLoop:
   170 000000F2 803B00                  cmp byte [rbx], NULL
   171 000000F5 7406                    je findEndDone
   172 000000F7 48FFC2                  inc rdx
   173 000000FA 48FFC3                  inc rbx
   174 000000FD EBF1                    jmp findEndLoop
   175                                 
   176                                  findEndDone:
   177                                 
   178 000000FF 4889F1                  mov rcx, rsi
   179 00000102 4889DE                  mov rsi, rbx
   180 00000105 4889D3                  mov rbx, rdx
   181                                  copyLoop:
   182 00000108 8A11                    mov dl, [rcx]
   183 0000010A 8816                    mov [rsi], dl
   184 0000010C 48FFC1                  inc rcx
   185 0000010F 48FFC6                  inc rsi
   186 00000112 48FFCB                  dec rbx
   187 00000115 75EF                    jnz copyLoop
   188                                 
   189                                 
   190 00000117 C60600                  mov byte [rsi], NULL
   191                                 
   192                                 
   193                                 
   194 0000011A 5B                      pop rbx
   195 0000011B C3                      ret
   196                                 
